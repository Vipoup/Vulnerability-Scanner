/// <reference types="cypress" />
/*
Purpose: Scan a given website to see if the website has any common 
            input SQL injection vulnerabilities.
*/
const website = prompt('Enter Website URL to test: ', 'http://hackxor.sourceforge.net/cgi-bin/portal.pl');
describe('Testing SQL injection (SQLi) on given login pages', () => {
    it('SQLi on login page using \'', () => {

        //visit given website
        cy.visit(website)
        .then(() => {

            //Search for result pages of the login
            cy.intercept({method: '+(POST|GET)', path: '+(portal.pl|login)'}).as('loginSQL');

            //get all input boxes
            cy.get('input:valid') 
            .then(($inputs)=>{ 

                //locate 1st input box
                //insert SQL injection
                cy.get($inputs[0]).type('\'');

                //submit SQL injection
                cy.get('[type=submit]').click()
                .then(()=>{

                    //look for result
                    //cy.intercept('POST', '/portal.pl ').as('someRoute');
                    cy.wait('@loginSQL');
                    cy.get('@loginSQL').then((res)=>{
                        expect(res.response.statusCode).to.equal(500);
                    });

                    //display if SQL injection is successful or not
                    //give explanation and resources if SQLi is successful


                }); //end of submit SQLi
                
            }); //end of get all input boxes
        });//end of visit website
    })//end of 'it'

    it('SQLi on login page using \' OR \'1=1', () => {
        
    })//end of 'it'

    it('SQLi on login page using \'; SELECT * FROM user;--', () => {
        
    })//end of 'it'

})//end of 'describe' 

/*
Need to work on:
    Bringing/Ensuring Cypress gets to a login page to begin
    Using Cypress to determine what is a successful login, invalid login, and invalid input(SQLi)
    Displaying if SQL injection is successful or not
        use window.alert(); to give explanation and resources if SQLi is successful

Last used Resources:
    https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Commands-Are-Asynchronous
    https://docs.cypress.io/api/commands/get#Syntax
    https://www.w3schools.com/cssref/css_selectors.asp
    https://www.w3schools.com/cssref/trysel.asp

    https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
    https://docs.cypress.io/api/commands/intercept#Intercepting-a-response
    https://idratherbewriting.com/learnapidoc/docapis_resource_endpoints.html
    https://www.youtube.com/watch?v=aUBYVOucON0                                 //video on intercept
    https://stackoverflow.com/questions/58489006/or-operator-in-cypress-io
*/